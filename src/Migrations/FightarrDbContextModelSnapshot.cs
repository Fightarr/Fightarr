// <auto-generated />
using System;
using Fightarr.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fightarr.Api.Migrations
{
    [DbContext(typeof(FightarrDbContext))]
    partial class FightarrDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Fightarr.Api.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnalyticsSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HostSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoggingSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaManagementSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProxySettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecuritySettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UISettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("Fightarr.Api.Models.AppTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<string>("CancellationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("TEXT");

                    b.Property<string>("Exception")
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsManual")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Progress")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Queued")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommandName");

                    b.HasIndex("Queued");

                    b.HasIndex("Status");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Fightarr.Api.Models.AuthSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("SessionId");

                    b.HasIndex("ExpiresAt");

                    b.ToTable("AuthSessions");
                });

            modelBuilder.Entity("Fightarr.Api.Models.BlocklistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BlockedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Indexer")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int>("Reason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TorrentInfoHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlockedAt");

                    b.HasIndex("EventId");

                    b.HasIndex("TorrentInfoHash");

                    b.ToTable("Blocklist");
                });

            modelBuilder.Entity("Fightarr.Api.Models.CustomFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IncludeCustomFormatWhenRenaming")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Specifications")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CustomFormats");
                });

            modelBuilder.Entity("Fightarr.Api.Models.DelayProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BypassIfAboveCustomFormatScore")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BypassIfHighestQuality")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumCustomFormatScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreferredProtocol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TorrentDelay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsenetDelay")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DelayProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BypassIfAboveCustomFormatScore = false,
                            BypassIfHighestQuality = false,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MinimumCustomFormatScore = 0,
                            Order = 1,
                            PreferredProtocol = "Usenet",
                            Tags = "[]",
                            TorrentDelay = 0,
                            UsenetDelay = 0
                        });
                });

            modelBuilder.Entity("Fightarr.Api.Models.DownloadClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseSsl")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DownloadClients");
                });

            modelBuilder.Entity("Fightarr.Api.Models.DownloadQueueItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Added")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DownloadClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DownloadId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("Downloaded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ImportedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Progress")
                        .HasColumnType("REAL");

                    b.Property<string>("Quality")
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("TimeRemaining")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DownloadClientId");

                    b.HasIndex("DownloadId");

                    b.HasIndex("EventId");

                    b.HasIndex("Status");

                    b.ToTable("DownloadQueue");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Added")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasFile")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Monitored")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Quality")
                        .HasColumnType("TEXT");

                    b.Property<int?>("QualityProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Venue")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventDate");

                    b.HasIndex("Organization");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Fight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fighter1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fighter2")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMainEvent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Method")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Round")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeightClass")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Fights");
                });

            modelBuilder.Entity("Fightarr.Api.Models.ImportHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Decision")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DestinationPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DownloadQueueItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Errors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourcePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Warnings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DownloadQueueItemId");

                    b.HasIndex("EventId");

                    b.HasIndex("ImportedAt");

                    b.ToTable("ImportHistories");
                });

            modelBuilder.Entity("Fightarr.Api.Models.ImportList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSyncMessage")
                        .HasColumnType("TEXT");

                    b.Property<int>("ListType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimumDaysBeforeEvent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MonitorEvents")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationFilter")
                        .HasColumnType("TEXT");

                    b.Property<int>("QualityProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RootFolderPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("SearchOnAdd")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ImportLists");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Indexer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalParameters")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AnimeCategories")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DownloadClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EarlyReleaseLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableAutomaticSearch")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableInteractiveSearch")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableRss")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumSeeders")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("MultiLanguages")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RejectBlocklistedTorrentHashes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeasonPackSeedTime")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("SeedRatio")
                        .HasColumnType("REAL");

                    b.Property<int?>("SeedTime")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Indexers");
                });

            modelBuilder.Entity("Fightarr.Api.Models.MediaManagementSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChangeFileDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChmodFolder")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChownGroup")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChownUser")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CopyFiles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CreateEventFolder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CreateEventFolders")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DeleteEmptyFolders")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventFolderFormat")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraFileExtensions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileChmod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ImportExtraFiles")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<long>("MinimumFreeSpace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecycleBin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RecycleBinCleanup")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RemoveCompletedDownloads")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RemoveFailedDownloads")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RenameEvents")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RenameFiles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReplaceIllegalCharacters")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RootFolders")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SetPermissions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SkipFreeSpaceCheck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StandardEventFormat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StandardFileFormat")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseHardlinks")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MediaManagementSettings");
                });

            modelBuilder.Entity("Fightarr.Api.Models.MetadataProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventFanartFilename")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EventImages")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EventNfo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventNfoFilename")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventPosterFilename")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FightCardNfo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FighterImages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageQuality")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("OrganizationLogos")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseEventFolder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MetadataProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Enabled = false,
                            EventFanartFilename = "fanart.jpg",
                            EventImages = true,
                            EventNfo = true,
                            EventNfoFilename = "{Event Title}.nfo",
                            EventPosterFilename = "poster.jpg",
                            FightCardNfo = false,
                            FighterImages = false,
                            ImageQuality = 95,
                            Name = "Kodi/XBMC",
                            OrganizationLogos = false,
                            Tags = "[]",
                            Type = 0,
                            UseEventFolder = true
                        });
                });

            modelBuilder.Entity("Fightarr.Api.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConfigJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Implementation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Fightarr.Api.Models.ProfileFormatItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FormatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FormatId");

                    b.ToTable("ProfileFormatItems");
                });

            modelBuilder.Entity("Fightarr.Api.Models.QualityDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxSize")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinSize")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PreferredSize")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quality")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Quality")
                        .IsUnique();

                    b.ToTable("QualityDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 199.9m,
                            MinSize = 1m,
                            PreferredSize = 194.9m,
                            Quality = 0,
                            Title = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 100m,
                            MinSize = 2m,
                            PreferredSize = 95m,
                            Quality = 1,
                            Title = "SDTV"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 100m,
                            MinSize = 2m,
                            PreferredSize = 95m,
                            Quality = 8,
                            Title = "WEBRip-480p"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 100m,
                            MinSize = 2m,
                            PreferredSize = 95m,
                            Quality = 2,
                            Title = "WEBDL-480p"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 100m,
                            MinSize = 2m,
                            PreferredSize = 95m,
                            Quality = 4,
                            Title = "DVD"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 100m,
                            MinSize = 2m,
                            PreferredSize = 95m,
                            Quality = 9,
                            Title = "Bluray-480p"
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 100m,
                            MinSize = 2m,
                            PreferredSize = 95m,
                            Quality = 16,
                            Title = "Bluray-576p"
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 10m,
                            PreferredSize = 995m,
                            Quality = 5,
                            Title = "HDTV-720p"
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 15m,
                            PreferredSize = 995m,
                            Quality = 6,
                            Title = "HDTV-1080p"
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 4m,
                            PreferredSize = 995m,
                            Quality = 20,
                            Title = "Raw-HD"
                        },
                        new
                        {
                            Id = 11,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 10m,
                            PreferredSize = 995m,
                            Quality = 10,
                            Title = "WEBRip-720p"
                        },
                        new
                        {
                            Id = 12,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 10m,
                            PreferredSize = 995m,
                            Quality = 3,
                            Title = "WEBDL-720p"
                        },
                        new
                        {
                            Id = 13,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 17.1m,
                            PreferredSize = 995m,
                            Quality = 7,
                            Title = "Bluray-720p"
                        },
                        new
                        {
                            Id = 14,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 15m,
                            PreferredSize = 995m,
                            Quality = 14,
                            Title = "WEBRip-1080p"
                        },
                        new
                        {
                            Id = 15,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 15m,
                            PreferredSize = 995m,
                            Quality = 15,
                            Title = "WEBDL-1080p"
                        },
                        new
                        {
                            Id = 16,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 50.4m,
                            PreferredSize = 995m,
                            Quality = 11,
                            Title = "Bluray-1080p"
                        },
                        new
                        {
                            Id = 17,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 69.1m,
                            PreferredSize = 995m,
                            Quality = 12,
                            Title = "Bluray-1080p Remux"
                        },
                        new
                        {
                            Id = 18,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 25m,
                            PreferredSize = 995m,
                            Quality = 17,
                            Title = "HDTV-2160p"
                        },
                        new
                        {
                            Id = 19,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 25m,
                            PreferredSize = 995m,
                            Quality = 18,
                            Title = "WEBRip-2160p"
                        },
                        new
                        {
                            Id = 20,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 25m,
                            PreferredSize = 995m,
                            Quality = 19,
                            Title = "WEBDL-2160p"
                        },
                        new
                        {
                            Id = 21,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 94.6m,
                            PreferredSize = 995m,
                            Quality = 13,
                            Title = "Bluray-2160p"
                        },
                        new
                        {
                            Id = 22,
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxSize = 1000m,
                            MinSize = 187.4m,
                            PreferredSize = 995m,
                            Quality = 21,
                            Title = "Bluray-2160p Remux"
                        });
                });

            modelBuilder.Entity("Fightarr.Api.Models.QualityProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CutoffFormatScore")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CutoffQuality")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FormatItems")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FormatScoreIncrement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Items")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("MaxSize")
                        .HasColumnType("REAL");

                    b.Property<int?>("MinFormatScore")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MinSize")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("UpgradesAllowed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("QualityProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormatItems = "[]",
                            FormatScoreIncrement = 1,
                            Items = "[{\"Name\":\"1080p\",\"Quality\":1080,\"Allowed\":true},{\"Name\":\"720p\",\"Quality\":720,\"Allowed\":false},{\"Name\":\"480p\",\"Quality\":480,\"Allowed\":false}]",
                            Name = "HD 1080p",
                            UpgradesAllowed = true
                        },
                        new
                        {
                            Id = 2,
                            FormatItems = "[]",
                            FormatScoreIncrement = 1,
                            Items = "[{\"Name\":\"1080p\",\"Quality\":1080,\"Allowed\":true},{\"Name\":\"720p\",\"Quality\":720,\"Allowed\":true},{\"Name\":\"480p\",\"Quality\":480,\"Allowed\":true}]",
                            Name = "Any",
                            UpgradesAllowed = true
                        });
                });

            modelBuilder.Entity("Fightarr.Api.Models.ReleaseProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ignored")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IncludePreferredWhenRenaming")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndexerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Preferred")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Required")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ReleaseProfiles");
                });

            modelBuilder.Entity("Fightarr.Api.Models.RemotePathMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RemotePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RemotePathMappings");
                });

            modelBuilder.Entity("Fightarr.Api.Models.RootFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Accessible")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long>("FreeSpace")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("TotalSpace")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("RootFolders");
                });

            modelBuilder.Entity("Fightarr.Api.Models.SystemEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Details")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("User")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("SystemEvents");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Fightarr.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Identifier")
                        .HasColumnType("TEXT");

                    b.Property<int>("Iterations")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Fightarr.Api.Models.BlocklistItem", b =>
                {
                    b.HasOne("Fightarr.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Fightarr.Api.Models.DownloadQueueItem", b =>
                {
                    b.HasOne("Fightarr.Api.Models.DownloadClient", "DownloadClient")
                        .WithMany()
                        .HasForeignKey("DownloadClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Fightarr.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DownloadClient");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Fight", b =>
                {
                    b.HasOne("Fightarr.Api.Models.Event", "Event")
                        .WithMany("Fights")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Fightarr.Api.Models.ImportHistory", b =>
                {
                    b.HasOne("Fightarr.Api.Models.DownloadQueueItem", "DownloadQueueItem")
                        .WithMany()
                        .HasForeignKey("DownloadQueueItemId");

                    b.HasOne("Fightarr.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DownloadQueueItem");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Fightarr.Api.Models.ProfileFormatItem", b =>
                {
                    b.HasOne("Fightarr.Api.Models.CustomFormat", "Format")
                        .WithMany()
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Event", b =>
                {
                    b.Navigation("Fights");
                });
#pragma warning restore 612, 618
        }
    }
}
