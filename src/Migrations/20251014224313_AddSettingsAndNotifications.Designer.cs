// <auto-generated />
using System;
using Fightarr.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fightarr.Api.Migrations
{
    [DbContext(typeof(FightarrDbContext))]
    [Migration("20251014224313_AddSettingsAndNotifications")]
    partial class AddSettingsAndNotifications
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Fightarr.Api.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnalyticsSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HostSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoggingSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaManagementSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProxySettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecuritySettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UISettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Added")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasFile")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Monitored")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Quality")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Venue")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventDate");

                    b.HasIndex("Organization");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Fight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fighter1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fighter2")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMainEvent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Method")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Round")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeightClass")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Fights");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConfigJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Implementation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Fightarr.Api.Models.QualityProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Items")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QualityProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Items = "[{\"Name\":\"1080p\",\"Quality\":1080,\"Allowed\":true},{\"Name\":\"720p\",\"Quality\":720,\"Allowed\":false},{\"Name\":\"480p\",\"Quality\":480,\"Allowed\":false}]",
                            Name = "HD 1080p"
                        },
                        new
                        {
                            Id = 2,
                            Items = "[{\"Name\":\"1080p\",\"Quality\":1080,\"Allowed\":true},{\"Name\":\"720p\",\"Quality\":720,\"Allowed\":true},{\"Name\":\"480p\",\"Quality\":480,\"Allowed\":true}]",
                            Name = "Any"
                        });
                });

            modelBuilder.Entity("Fightarr.Api.Models.RootFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Accessible")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FreeSpace")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("RootFolders");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Fight", b =>
                {
                    b.HasOne("Fightarr.Api.Models.Event", "Event")
                        .WithMany("Fights")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Fightarr.Api.Models.Event", b =>
                {
                    b.Navigation("Fights");
                });
#pragma warning restore 612, 618
        }
    }
}
