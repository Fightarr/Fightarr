name: Create Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.bump_version.outputs.version }}
      release_created: 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-bump version
        id: bump_version
        run: |
          # Get current version from Version.cs
          CURRENT_VERSION=$(grep 'AppVersion =' src/Version.cs | sed 's/.*"\(.*\)".*/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Parse version (format: 1.0.X)
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          echo "New version: $NEW_VERSION"
          echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_number=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update Version.cs
          sed -i "s/AppVersion = \"$CURRENT_VERSION\"/AppVersion = \"$NEW_VERSION\"/" src/Version.cs

          # Configure git
          git config user.name "Fightarr"
          git config user.email "unmannedmediaplex@gmail.com"

          # Commit version bump
          git add src/Version.cs
          git commit -m "chore: Bump version to $NEW_VERSION [skip ci]"

          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Extract changelog for version
        id: changelog
        run: |
          VERSION="${{ steps.bump_version.outputs.version }}"
          # Extract the changelog section for this version
          if [ -f CHANGELOG.md ]; then
            sed -n "/## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
          fi
          # If release_notes.md is empty, use a default message with commit info
          if [ ! -s release_notes.md ]; then
            echo "Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "## Changes" >> release_notes.md
            git log --pretty=format:"- %s" -1 >> release_notes.md
            echo "" >> release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](https://github.com/Fightarr/Fightarr/blob/main/CHANGELOG.md) for details." >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.bump_version.outputs.version }}
          name: Fightarr ${{ steps.bump_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    needs: release
    if: needs.release.outputs.release_created == 'true'
    uses: ./.github/workflows/docker.yml
    with:
      version: ${{ needs.release.outputs.version }}
    secrets: inherit
