name: Create Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      release_created: ${{ steps.check_release.outputs.exists == 'false' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from Version.cs
        id: get_version
        run: |
          VERSION=$(grep 'AppVersion =' src/Version.cs | sed 's/.*"\(.*\)".*/\1/')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ steps.get_version.outputs.version }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract changelog for version
        id: changelog
        if: steps.check_release.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          # Extract the changelog section for this version
          sed -n "/## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
          # If release_notes.md is empty, use a default message
          if [ ! -s release_notes.md ]; then
            echo "Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](https://github.com/Fightarr/Fightarr/blob/main/CHANGELOG.md) for details." >> release_notes.md
          fi

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Fightarr ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    needs: release
    if: needs.release.outputs.release_created == 'true'
    uses: ./.github/workflows/docker.yml
    with:
      version: ${{ needs.release.outputs.version }}
    secrets: inherit
